{
	"info": {
		"_postman_id": "9f96bedf-a3a7-4d0b-b3b9-34c45ebb8ce9",
		"name": "Group_19",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "BuT",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "but",
							"disabled": true
						},
						{
							"key": "password",
							"value": "but",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Env login, age, salary\r",
							"let parseALL = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"login\", parseALL.person.u_name[0]);\r",
							"postman.setEnvironmentVariable(\"age\", parseALL.person.u_age);\r",
							"postman.setEnvironmentVariable(\"salary\", parseALL.start_qa_salary);\r",
							"postman.setEnvironmentVariable(\"u_salary_1.5_year\", parseALL.person.u_salary_1_5_year);\r",
							"pm.environment.set(\"test\", parseALL.person.u_salary_1_5_year);\r",
							"\r",
							"// salary\r",
							"let qa_salary_after_6_months_eql = parseALL.start_qa_salary * 2\r",
							"let qa_salary_after_12_months_eql = parseALL.start_qa_salary * 2.9\r",
							"let u_salary_1_5_year_eql = parseALL.start_qa_salary * 4\r",
							"\r",
							"// Check salary\r",
							"pm.test('Check salary after_6_months', function(){\r",
							"    pm.expect(parseALL.qa_salary_after_6_months).to.eql(qa_salary_after_6_months_eql);\r",
							"})\r",
							"\r",
							"pm.test('Check salary 1.5_year', function(){\r",
							"    pm.expect(parseALL.person.u_salary_1_5_year).to.eql(u_salary_1_5_year_eql);\r",
							"})\r",
							"\r",
							"pm.test('Check salary after_12_months', function(){\r",
							"    pm.expect(parseALL.qa_salary_after_12_months).to.eql(qa_salary_after_12_months_eql);\r",
							"})\r",
							"\r",
							"// Schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"integer\"},\r",
							"                        {\"type\": \"integer\"}\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"},\r",
							"            },\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"integer\"}, \r",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"        \"start_qa_salary\": {\"type\": \"integer\"},\r",
							"    },\r",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 39,\r\n    \"salary\": 2000,\r\n    \"name\": \"BuT\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					],
					"query": [
						{
							"key": "age",
							"value": "38",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "75",
							"disabled": true
						},
						{
							"key": "name",
							"value": "but",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let parseALL = JSON.parse(responseBody);\r",
							"\r",
							"let salary_1_eql = pm.environment.get(\"salary\") * 2\r",
							"let salary_2_eql = parseALL.salary[0] * 3\r",
							"\r",
							"\r",
							"// Check salary\r",
							"pm.test('salary_1_eql', function(){\r",
							"    pm.expect(parseInt(parseALL.salary[1])).to.eql(salary_1_eql);\r",
							"})\r",
							"pm.test('salary_2_eql', function(){\r",
							"    pm.expect(parseInt(parseALL.salary[2])).to.eql(salary_2_eql);\r",
							"})\r",
							"\r",
							"pm.test(\"2-й элемент массива salary больше 1-го\", function () {\r",
							"    pm.expect(parseInt(parseALL.salary[2])).to.be.above(parseInt(parseALL.salary[1])); \r",
							"});\r",
							"\r",
							"pm.test(\"2-й элемент массива salary больше 0-го\", function () {\r",
							"    pm.expect(parseInt(parseALL.salary[2])).to.be.above(parseInt(parseALL.salary[0])); \r",
							"});\r",
							"\r",
							"// Schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"name\": {\"type\": \"string\"},  \r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\"type\": \"integer\"},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"salary\"]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data?age=38&salary=15000&name=BuT&auth_token=/s34lfgbj/None/jjd909/77159kjkWpqc2170None35131evny",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					],
					"query": [
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "15000"
						},
						{
							"key": "name",
							"value": "BuT"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/None/jjd909/77159kjkWpqc2170None35131evny"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let parseAll = JSON.parse(responseBody);\r",
							"\r",
							"let weight_food = parseInt(request.data.weight) * 0.012;\r",
							"let weight_sleep = parseInt(request.data.weight) * 2.5;\r",
							"\r",
							"\r",
							"// Check weight\r",
							"pm.test('коэффициенты верны', function(){\r",
							"    pm.expect(weight_food).to.eql(parseAll.daily_food);\r",
							"})\r",
							"\r",
							"pm.test('коэффициенты верны', function(){\r",
							"    pm.expect(weight_sleep).to.eql(parseAll.daily_sleep);\r",
							"})\r",
							"\r",
							"// Schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"integer\"},  \r",
							"        \"daily_sleep\": {\"type\": \"integer\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\",\"name\"]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let parseAll = JSON.parse(responseBody);\r",
							"\r",
							"// Check name\r",
							"pm.test('имена верны', function(){\r",
							"    pm.expect(parseAll.name).to.eql(pm.environment.get('login'));\r",
							"});\r",
							"\r",
							"pm.test('возраст верен', function(){\r",
							"    pm.expect(parseAll.age).to.eql(pm.environment.get('age'));\r",
							"})\r",
							"\r",
							"// check schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\":{\"type\": \"string\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"}\r",
							"    },\r",
							"    \"required\":[\"age\", \"name\", \"salary\"]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let cur_all = JSON.parse(responseBody);\r",
							"\r",
							"// размер массива\r",
							"//let len_array = _.size(cur_all)\r",
							"\r",
							"// выбираем рандомный обьект и достаем его Cur_ID\r",
							"let cur_random = cur_all[Math.floor(Math.random() * cur_all.length) + 1].Cur_ID;\r",
							"\r",
							"//передать через окружение в следующий запрос\r",
							"postman.setEnvironmentVariable(\"cur_random\", cur_random);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{cur_random}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let cur_all = JSON.parse(responseBody);\r",
							"\r",
							"for (let i=0; i<10; i++){\r",
							"    let spisor = []\r",
							"    let cur_id = cur_all[i].Cur_ID;\r",
							"    echoPostRequest = {\r",
							"        url: 'http://168.119.182.98:5002/curr_byn',\r",
							"        header: {'content-type': 'application/json'},\r",
							"        method: 'POST',\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                {'key': \"auth_token\", 'value': pm.environment.get(\"token\")},\r",
							"                {'key': \"curr_code\", 'value': cur_id},\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"    pm.sendRequest(echoPostRequest, (error, response) => {\r",
							"        if(pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"            console.log(response.json());\r",
							"        }));\r",
							"});\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}